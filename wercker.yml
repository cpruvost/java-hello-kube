box: cpruvost/java-hello-kube

build:
  steps:
    - script:
        name: mvn package
        code: |
          mvn clean package
   
  after-steps:
        - slack-notifier:
            url: $SLACK_URL
            channel: devops
            username: werckerbot
    
push-to-releases:
  steps:
    - script:
        name: check
        code: |
            java -version
    # Push to the private docker Container Registry (OCIR)
    - internal/docker-push:
          #-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
          cmd: java -jar ./target/rest-example-0.2.0.jar
          working-dir: $WERCKER_ROOT
          #tag: $WERCKER_GIT_COMMIT
          tag: latest
          ports: "8090"
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
          repository: $DOCKER_REPO
          registry: https://iad.ocir.io/v2
         
  after-steps:
        - slack-notifier:
            url: $SLACK_URL
            channel: devops
            username: werckerbot
 
deploy-to-oke:
    box: python:2.7
    steps:

    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes
          
    # remove last deployment first 
    - kubectl:
        name: remove last deploy to kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: delete deployment my-jhk-deploy    
          
    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
    - kubectl:
        name: deploy to kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/

    # Tell Kubernetes that we're going to wait 60 seconds for the deploy to be successful
    - kubectl:
        name: set deployment timeout
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: patch deployment/my-jhk-deploy -p '{"spec":{"progressDeadlineSeconds":60}}'

    # Watch the Kubernetes deployment. Once the pods are considered healthy the step will exit 0
    # If they aren't healthy within 60 seconds, it will exit with a non 0 exit code, and cause the run to fail.
    - kubectl:
        name: check deployment status
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: rollout status deployment/my-jhk-deploy
        
    after-steps:
        - slack-notifier:
            url: $SLACK_URL
            channel: devops
            username: werckerbot
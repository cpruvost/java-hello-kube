box: cpruvost/java-hello-kube

build:
  steps:
    - script:
        name: mvn package
        code: |
          mvn clean package
    
push-to-releases:
  steps:
    - script:
        name: check
        code: |
            java -version
    # Push to the private docker Container Registry (OCIR)
    - internal/docker-push:
          cmd: java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar ./target/rest-example-0.2.0.jar
          working-dir: $WERCKER_ROOT
          tag: $WERCKER_GIT_COMMIT
          ports: "8080"
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
          repository: $DOCKER_REPO
          registry: https://iad.ocir.io/v2
          
deploy-to-kubernetes:
    box: python:2.7
    steps:
 
    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template
    # The step above should leave us with a Kubernetes service and deployment yml files.
  # We'll create a directory to move them to.
  - script:
      name: Prepare Kubernetes files
      code: |
        mkdir $WERCKER_OUTPUT_DIR/kubernetes
        mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes
  # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
  - kubectl:
      name: deploy to kubernetes
      server: $OKE_MASTER
      token: $OKE_TOKEN
      insecure-skip-tls-verify: true
      command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
      